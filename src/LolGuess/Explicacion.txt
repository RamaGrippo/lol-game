
Manipulación de Datos en un Array en JavaScript

Aquí se explica cómo manipular un array como `lolChampions` en JavaScript para hacer varias operaciones: llamar, filtrar, buscar y obtener atributos específicos de los elementos. Se usan métodos como `forEach`, `filter`, `map`, y `find` que son fundamentales en la manipulación de arrays en JavaScript.

0. Obtener objeto entero filtrando por nombre de campeon

const campeon = lolChampions.find((champion) => champion.nombre === "Aatrox");
if (campeon) {
  console.log(campeon.utilidad); // Si el campeón existe, imprime el atributo "utilidad"
} else {
  console.log("Campeón no encontrado");
}
console.log(campeon);


1. Recorrer el Array con `forEach`
Puedes usar `forEach` para recorrer todos los elementos y realizar una operación en cada uno.

lolChampions.forEach((champion) => {
  console.log(champion.nombre); // Imprime el nombre de cada campeón
});


2. Filtrar Elementos con `filter`
Si quieres obtener todos los campeones que cumplan con una condición específica, usa `filter`.

**Ejemplo: Obtener campeones que sean de la posición "Top"**
javascript
const topChampions = lolChampions.filter((champion) =>
  champion.posiciones.includes("Top")
);
console.log(topChampions);

**Explicación**: Esto crea un nuevo array `topChampions` que contiene solo los campeones que tienen "Top" en el array `posiciones`.


3. Buscar un Elemento con `find`
Si solo necesitas un elemento que cumpla una condición (como un campeón específico), usa `find`.

**Ejemplo: Encontrar un campeón por nombre**
const ahri = lolChampions.find((champion) => champion.nombre === "Ahri");
console.log(ahri);

**Explicación**: Esto devuelve el objeto que representa a Ahri en el array `lolChampions`.

4. Obtener Atributos Específicos con `map`
Si quieres obtener solo algunos atributos de cada campeón, puedes usar `map` para crear un nuevo array con esos atributos.

**Ejemplo: Obtener un array de nombres de todos los campeones**
const nombresDeCampeones = lolChampions.map((champion) => champion.nombre);
console.log(nombresDeCampeones);

**Explicación**: `map` devuelve un nuevo array que contiene solo los nombres de los campeones.

5. Combinar Métodos
Puedes combinar métodos para hacer búsquedas o filtros más avanzados.

**Ejemplo: Obtener los nombres de campeones que sean "Female" y tengan "Mana" como recurso**
const campeonasConMana = lolChampions
  .filter((champion) => champion.genero === "Female" && champion.recurso === "Mana")
  .map((champion) => champion.nombre);
console.log(campeonasConMana);

**Explicación**: Primero `filter` selecciona los campeones que son de género "Female" y tienen "Mana" como recurso. Luego `map` extrae solo los nombres.

6. Contar Elementos con `reduce`
Si quieres contar cuántos campeones cumplen con una condición, `reduce` es una buena opción.

**Ejemplo: Contar cuántos campeones son de la región "Ionia"**
const ionianCount = lolChampions.reduce((count, champion) => {
  if (champion.regiones.includes("Ionia")) {
    return count + 1;
  }
  return count;
}, 0);
console.log(ionianCount);

**Explicación**: `reduce` empieza en 0 y aumenta el contador en 1 cada vez que encuentra un campeón de la región "Ionia".

7. Modificar Atributos de los Elementos
Si quieres modificar un atributo de todos los elementos, puedes usar `map` para crear una nueva versión del array con los cambios aplicados.

**Ejemplo: Cambiar el valor de `dureza` a "Alta" para todos los campeones de la especie "Darkin"**
const updatedChampions = lolChampions.map((champion) => {
  if (champion.especies.includes("Darkin")) {
    return { ...champion, dureza: "Alta" };
  }
  return champion;
});
console.log(updatedChampions);

**Explicación**: `map` devuelve un nuevo array con los mismos elementos, excepto que los campeones de la especie "Darkin" ahora tienen `dureza` como "Alta".

8. Agrupar Campeones por Atributo
Si quieres agrupar campeones por un atributo específico, puedes usar `reduce` para crear un objeto con grupos.

**Ejemplo: Agrupar campeones por `recurso`**
const championsByResource = lolChampions.reduce((acc, champion) => {
  const resource = champion.recurso;
  if (!acc[resource]) {
    acc[resource] = [];
  }
  acc[resource].push(champion);
  return acc;
}, {});
console.log(championsByResource);

**Explicación**: Esto crea un objeto donde cada clave es un tipo de recurso, y el valor es un array con campeones que tienen ese recurso.